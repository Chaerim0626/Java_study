package java_practice2;

abstract class Animal {
	//구체적인 내용은 작성하지 않고 공통적인 특징을 추상적으로 선언 --> 리턴값 조차도 없이 메서드명만 선언
	abstract void cry();
	
}
class Dog extends Animal {
	void cry() {System.out.println("멍멍");}
}
class Cat extends Animal {
	void cry(){System.out.println("야용");}
}


public class practice2 {

	public static void main(String[] args) {
		
		//1. 추상클래스는 구체적 내용이 없어 객체 생성 불가능

		
		//2. 추상클래스 사용 -> 상속 받아 사용
		//추상 클래스를 상속받은 자식클래스에서 해당 메서드를 오버라이딩하여 재정의한 후 사용
		Dog dog = new Dog();
		dog.cry();
		
		Cat cat = new Cat();
		cat.cry();
		
		//3. 추상클래스는 다른 클래스들의 공통적인 특징을 변수나 메서드로 정의만 해놓음
		//abstract를 앞에 붙이고 클래스 안에 추상 메서드를 포함하고 있는 것을 제외하면 사실 일반클래스와 별반 차이 X
		//추상클래스는 Field, Constructor, Method도 포함할 수 있음
		
		//메서드 선언만 있고 구체적인 내용은 없으므로 객체 생성 X
		//따라서, 부모 클래스로서의 역할은 하지만 구체적인 사용은 상속받은 자식 클래스에서 재정의 하여 사용 -->강제성
		//추상클래스에서 선언만 해놓음으로써 이후 새로운 클래스들이 이를 상속받아 구현하므로 새로운 클래스를 작성할때 하나의 틀이 됨
		//왜씀? 강제하기 위해, 부모클래스가 선언해놓은 메소드를 상속받은 자식 클래스들이 이름 그대로 재정의해서 구현하라고 강제
		//상속받은 자식 클래스 입장에서는 자칫 상속만 받고 재정의해서 사용을 안할 수도 있기에
		//자식 클래스에서는 추상 메서드를 재정의해서 구현하도록 강제하기 위함
		
		//꼭 재정의해야만 하는가? ㅇㅇ
		//자식 클래스는 일단은 무조건 부모 클래스로부터 상속받은 추상 메서드는 오버라이딩해서 재정의해야함
		//추상 메서드를 포함하면 추상 클래스여야 함
		
		//재정의 하고 싶지 않다면?
		//자식 클래스에서 상속받은 추상 메서드를 구현하지 않는다면 자식클래스도 abstract를 붙여 추상으로 만든다
		
		//여러명의 개발자가 작업할 때 코드의 확장과 분업을 효율적으로 처리
		//분업화 시스템에서 공통의 프로젝트를 진행할 때 많이 사용하는 문법
	}
}
